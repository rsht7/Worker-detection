# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings
from . import service_pb2 as service__pb2


GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SurveillanceStub(object):
    """----- gRPC Service -----

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetZoneData = channel.unary_unary(
                '/surveillance.Surveillance/GetZoneData',
                request_serializer=service__pb2.ZoneRequest.SerializeToString,
                response_deserializer=service__pb2.ZoneData.FromString,
                _registered_method=True)
        self.SendAlert = channel.unary_unary(
                '/surveillance.Surveillance/SendAlert',
                request_serializer=service__pb2.AlertData.SerializeToString,
                response_deserializer=service__pb2.Ack.FromString,
                _registered_method=True)


class SurveillanceServicer(object):
    """----- gRPC Service -----

    """

    def GetZoneData(self, request, context):
        """AI polls this to get zones + rules for a camera
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendAlert(self, request, context):
        """AI pushes detected alerts to backend
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SurveillanceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetZoneData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetZoneData,
                    request_deserializer=service__pb2.ZoneRequest.FromString,
                    response_serializer=service__pb2.ZoneData.SerializeToString,
            ),
            'SendAlert': grpc.unary_unary_rpc_method_handler(
                    servicer.SendAlert,
                    request_deserializer=service__pb2.AlertData.FromString,
                    response_serializer=service__pb2.Ack.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'surveillance.Surveillance', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('surveillance.Surveillance', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Surveillance(object):
    """----- gRPC Service -----

    """

    @staticmethod
    def GetZoneData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/surveillance.Surveillance/GetZoneData',
            service__pb2.ZoneRequest.SerializeToString,
            service__pb2.ZoneData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendAlert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/surveillance.Surveillance/SendAlert',
            service__pb2.AlertData.SerializeToString,
            service__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
